name: "Release"

on:
  release:
    types: ["released"]

jobs:
  deploy:
    runs-on: "ubuntu-24.04"
    environment: prod
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
      - name: "Check that release commit is in main or hotfix"
        run: "git merge-base --is-ancestor HEAD origin/main || git merge-base --is-ancestor HEAD origin/hotfix"
      - name: "Check if there are schema migrations"
        id: alembic
        run: |
          git log --oneline origin/prod.. backend/alembic/versions/
          if [ "$(git log --oneline origin/prod.. backend/alembic/versions/)" ]; then
            echo "present=1" >> "$GITHUB_OUTPUT"
          fi

          git log --oneline ..origin/prod backend/alembic/versions/
          if [ "$(git log --oneline ..origin/prod backend/alembic/versions/)" ]; then
            echo "present=1" >> "$GITHUB_OUTPUT"
            echo "*** SCHEMA MIGRATIONS PRESENT DURING ROLLBACK ***"
            echo "Schema downgrade needs to be done manually!"
          fi
      - name: "Configure AWS credentials (dev)"
        uses: "aws-actions/configure-aws-credentials@v4"
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_DEV }}:role/github-actions-uma"
          aws-region: "us-west-2"
      - name: "Log into ECR (dev)"
        id: ecr-dev
        uses: "aws-actions/amazon-ecr-login@v2"
      - name: "Configure AWS credentials (prod)"
        uses: "aws-actions/configure-aws-credentials@v4"
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/github-actions-uma"
          aws-region: "us-west-2"
      - name: "Log into ECR (prod)"
        id: ecr-prod
        uses: "aws-actions/amazon-ecr-login@v2"
      - name: "Configure Kubernetes cluster"
        run: "aws --region us-west-2 eks update-kubeconfig --name prod"
      - name: "Check that frontend version exists"
        run: |
          GIT_HASH="$(git log -1 --format='%cs-%H' frontend)"
          echo "Frontend git hash: $GIT_HASH"
          scripts/deploy.py --check $GIT_HASH:0:19
      - name: "Copy backend image to prod ECR"
        run: |
          GIT_HASH="$(git log -1 --format='%H' backend)"
          skopeo copy --all docker://${{ steps.ecr-dev.outputs.registry }}/uma-sandbox:git_${GIT_HASH:0:8} docker://${{ steps.ecr-prod.outputs.registry }}/uma-sandbox:git_${GIT_HASH:0:8}
          skopeo copy --all docker://${{ steps.ecr-dev.outputs.registry }}/uma-sandbox:git_${GIT_HASH:0:8} docker://${{ steps.ecr-prod.outputs.registry }}/uma-sandbox:${{ github.ref_name }}
          skopeo copy --all docker://${{ steps.ecr-dev.outputs.registry }}/uma-sandbox:git_${GIT_HASH:0:8} docker://${{ steps.ecr-prod.outputs.registry }}/uma-sandbox:latest
      - name: "Announce to Slack"
        continue-on-error: true
        run: |
          curl --data-binary @- --header "Content-Type: application/json" --silent "${{ secrets.SLACK_WEBHOOK_ENGUMA }}" <<EOF
          {
            "text": ":arrow_forward: ${{ github.actor }} is <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}|releasing> <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}> to production"
          }
          EOF
      - name: "Restart pods"
        run: |
          kubectl -n uma-sandbox rollout restart deploy -l app.kubernetes.io/instance=uma-sandbox
      - name: "Update release branch"
        run: "git push -f origin HEAD:prod"
      - name: "Check pod status"
        run: |
          for i in `seq 30`; do
            sleep 10s
            date
            kubectl -n uma-sandbox get pods -l 'app.kubernetes.io/instance=uma-sandbox' -o jsonpath='{range .items[*]}{.metadata.name} {.status.phase} {.status.conditions[?(@.type=="Ready")].status}{ "\n"}{end}' | grep -v ' Running True$' | grep -Ev 'alembic' | tee /tmp/status
            if [ ! -s /tmp/status ]; then break; fi
          done
          if [ -s /tmp/status ]; then exit 1; fi
      - name: "Deploy frontend"
        run: |
          GIT_HASH="$(git log -1 --format='%cs-%H' frontend)"
          scripts/deploy.py --source ${{ secrets.FRONTEND_BUILD_BUCKET }} --destination ${{ secrets.FRONTEND_BUCKET_PROD }} --strip-extension $GIT_HASH --version $GIT_HASH:0:19
      - name: "Notify failure on Slack"
        if: "failure()"
        run: |
          curl --data-binary @- --header "Content-Type: application/json" --silent "${{ secrets.SLACK_WEBHOOK_ENGUMA }}" <<EOF
          {
            "text": ":x: ${{ github.workflow }} workflow by ${{ github.actor }} <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}|failed> in ${{ github.job }} on <${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA|${{ github.ref_name }}>"
          }
          EOF